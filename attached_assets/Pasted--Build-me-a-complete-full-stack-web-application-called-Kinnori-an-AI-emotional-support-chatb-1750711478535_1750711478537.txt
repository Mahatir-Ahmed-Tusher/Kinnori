
Build me a complete full-stack web application called **Kinnori**, an **AI emotional support chatbot platform** where users can log in, customize their chatbot companion, and have meaningful, emotionally intelligent conversations.

---

### üåê Stack and Technologies:

**Frontend**:

* `Next.js` (App Router)
* `TypeScript`
* `Tailwind CSS` for styling
* `Shadcn UI` for beautiful component styling
* `Framer Motion` for animations

**Authentication**:

* Use **Google OAuth** ONLY.
* Use `NEXT_PUBLIC_GOOGLE_AUTH_CLIENT_ID_KEY` from environment variables.
* Upon login, store user data (name, email, avatar) in database.

**AI**:

* Use **Gemini API (free tier)** for AI responses.
* Chatbot must behave **like a real human**, with emotional tone, empathy, and a role-based personality.
* Gemini prompt must be dynamically generated from the user's settings (name, gender, role, backstory, and tone).

**Multilingual Understanding**:

* Kinnori must understand:

  * **Bengali (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)**
  * **English**
  * **Banglish (Bangla written in English letters)**
* Language auto-detection should be added (optional: via simple regex or prompt engineering).

**Database**:

* Use **PostgreSQL** with **Prisma ORM**.
* Schema:

  ```prisma
  model User {
    id            String   @id @default(uuid())
    email         String   @unique
    name          String
    image         String
    createdAt     DateTime @default(now())
    botProfiles   BotProfile[]
    chatMessages  ChatMessage[]
  }

  model BotProfile {
    id          String   @id @default(uuid())
    userId      String
    name        String
    gender      String
    role        String
    tone        String
    backstory   String
    avatarUrl   String
    theme       String
    createdAt   DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    chats       ChatMessage[]
  }

  model ChatMessage {
    id           String   @id @default(uuid())
    userId       String
    botProfileId String
    message      String
    sender       String   // "user" or "bot"
    timestamp    DateTime @default(now())
    user         User     @relation(fields: [userId], references: [id])
    botProfile   BotProfile @relation(fields: [botProfileId], references: [id])
  }
  ```

---

### ‚ú® Features:

Keep a beautiful landing page with a lot of beautiful designs and animations at first, there will be a button to log in and get started

#### 1. **Authentication**

* Use **Google Sign-In** via OAuth2.
* After login, store user data in DB if not already present.

Give all the instructions how to set the authentication and set the database

#### 2. **Bot Customization Panel**

* After login, user can create/edit a bot profile with:

  * Name
  * Gender
  * Role (e.g., girlfriend, friend, mother, therapist, etc.)
  * Tone (romantic, humorous, serious, empathetic, etc.)
  * Avatar (image URL or file upload)
  * How the users wanna chat (freeform text)
  * Backstory (freeform text)
  * Theme (selectable below)

#### 3. **Themes (Chat UI Skins)**

* üå∏ **Wallflower** ‚Äì soft pink, elegant fonts (for romantic roles)
* üéâ **ComicPal** ‚Äì comic-style font, playful UI (for friends)
* üåô **NeutralNight** ‚Äì calm, dark, neutral look (for therapists, parents, etc.)
* Theme affects font, background, chat bubbles, etc.

#### 4. **Chat Interface**

* Full-featured, scrollable chat interface.
* Previous chats are saved per user and bot.
* New message triggers Gemini API with contextual prompt (user‚Äôs input + bot‚Äôs personality config).
* Bot responds like a **real human** with emotion and natural tone.
* Add typing animation, avatars, and smooth transitions (via Framer Motion).

#### 5. **Multilingual Support**

* User can type in:

  * English
  * ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ
  * Bangla in English letters
* Gemini prompts must clearly indicate what kind of language the user is writing in and respond in the same.
* Example prompt fragment to Gemini:

  ```
  The user may be speaking in English, Bengali, or Bengali in Roman script. Detect the language and reply accordingly. Always stay in character as {botName}, who is a {role}, speaking in a {tone} tone.
  ```

#### 6. **Settings Panel**

* Users can switch chat theme
* Edit existing bot profiles
* Delete chats or bots

---

### üé® UI Design Guidelines (First-Class Quality):

* Use **Shadcn UI** components for consistent styling
* Use **Tailwind CSS** to style with elegance:

  * Rounded corners (`rounded-2xl`)
  * Smooth shadows (`shadow-xl`)
  * Plenty of padding (`p-4`, `p-6`)
  * Use `max-w-screen-md` for focused chat layout
  * Distinct backgrounds per theme
* Use **Framer Motion** to animate:

  * Message fade-in
  * Bot typing indicator
  * Smooth page transitions
* Keep chat bubbles **visually separated** with timestamp hover
* Responsive design: works on both desktop and mobile
* Use system font stack or soft fonts (e.g., Quicksand, Inter)

---

### ‚öôÔ∏è Deployment Instructions:

* Prepare `.env.local`:

  ```env
  NEXT_PUBLIC_GOOGLE_AUTH_CLIENT_ID_KEY=your_google_client_id
  GEMINI_API_KEY=your_gemini_api_key
  DATABASE_URL=your_postgres_connection_string
  ```
we will deploy it on vercel later.
---

### üîö Final Notes:

* Name of the platform: **Kinnori**
* The chatbot must feel **human**, emotionally warm, and context-aware.
* Make the overall experience feel **personal, gentle, and safe** ‚Äî like talking to a real loved one or friend.

---
make sure kinnori is bilingual, the UI of kinnori is bilingual and can be changed in the settings. the default language is English. the Bengali font will be hind Siliguri. 